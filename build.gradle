import org.gradle.plugins.ide.eclipse.model.Facet

apply plugin: 'maven'
apply plugin: 'java'
apply plugin: 'war'

sourceCompatibility=1.6   // 设置 JDK 版本
targetCompatibility=1.6
webAppDirName = 'web' // 设置 WebApp 根目录

ext{
jarPrefix="redfire"
jarModelName="log"
jarClassifier=new Date().format('yyyyMMdd');
jarVersion=1.0
}

// 设置 Java 源码所在目录
sourceSets {
    main {
        java {
            srcDirs = ['src']
        }
        resources {
            srcDirs = ['resource']
        }
    }
    peakApi {
        java {
            srcDirs = ['src_api']
        }
        compileClasspath=compileClasspath + files(sourceSets.main.output.classesDir)
    }
    test {
        java {
            srcDirs = ['test']
        }
    }
}
compilePeakApiJava.dependsOn compileJava
// 设置 maven 库地址
repositories {
    mavenCentral() 
    // maven {
    // 
    //url "http://127.0.0.1:8099/nexus/content/groups/public/"
    //}
}
// 设置依赖
dependencies {
      compile group: 'commons-logging', name: 'commons-logging', version: '1.2' 
      compile group: 'log4j', name: 'log4j', version: '1.2.17'
      compile group: 'org.apache.logging.log4j', name: 'log4j-web', version: '2.6.2'
      compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.21'
      compile group: 'junit', name: 'junit', version: '4.12'
	  //compile fileTree(dir:"./lib/jdbc_jar",include:"*.jar")
	  //runtime  // testCompile 
}
//依赖编译，然后打包JAR
task pkJar(type:Jar,dependsOn: compileJava) { 
		 archiveName =jarPrefix+"-"+ jarModelName + "-" + jarVersion + "-" + jarClassifier + ".jar" ;
	     println ("main:"+sourceSets.main.output.classesDir);
	     from sourceSets.main.output.classesDir
}
task peakApiJar(type:Jar,dependsOn:compilePeakApiJava) {     
		 archiveName =jarPrefix+"-"+ jarModelName + "-peakApi-" + jarVersion + "-" +jarClassifier + ".jar" ;
		 println ("peakApi:"+sourceSets.peakApi.output.classesDir);
	     sourceSets.peakApi.compileClasspath.each{
			println it
		 }
		 from sourceSets.peakApi.output.classesDir
}
//清除上次的编译过的文件
task clearPj(type:Delete){
     delete 'build','disk'
}
task  releaseJar(type:Copy,dependsOn: [clearPj,pkJar,peakApiJar]){
     from('build/libs') {
        include '*.jar'
     }
     into ('target')
}

task release(type:Copy,dependsOn:releaseJar) {
	  copy{
	     from('build/libs') {
         include '*.jar'
         }
         into ('dist')
	  }
	  copy{
	     from('build/libs') {
           include '*.jar'
         }
         into ('dist/web/WEB-INF/lib/')
	 }
	  copy{
	     from('WebRoot') {
          include 'framework/**/*.*'
         }
         into ('dist/web/')
	 }
	 
}
task baseJavadocs(type:Javadoc,dependsOn: compileJava) {
     classpath =configurations.compile
     source = sourceSets.main.java
}
task peakJavadocs(type:Javadoc,dependsOn:compilePeakApiJava) {
     classpath +=files(sourceSets.main.output.classesDir)
     source =sourceSets.peakApi.java
}
task baseJavadocsZip(type:Jar, dependsOn: baseJavadocs) {     
	 archiveName =jarPrefix+"-"+ jarModelName +"-"+jarVersion + "-" + jarClassifier + "_doc.zip" ;
	 from "build/docs/javadoc/"
}
task peakJavadocsZip(type:Jar, dependsOn: peakJavadocs) {     
	 archiveName =jarPrefix+"-"+ jarModelName +"-peakApi-"+jarVersion + "-" + jarClassifier + "_doc.zip" ;
	 from "build/docs/javadoc/"
}
//----------------------------------------------------
task copyLib(type: Copy) {
  from configurations.runtime
  into 'web/WEB-INF/lib' 
}
tasks.withType(JavaCompile) {  
  options.encoding = "UTF-8"  
}
tasks.withType(Javadoc) {  
  options.encoding = "UTF-8"  
}
